{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","../src/lib/modify-template.ts","../src/lib/shady-render.ts","../src/lib/updating-element.ts","../src/lib/decorators.ts","../src/lib/css-tag.ts","src/lit-element.ts","src/shaders/vertex-shader.vert","src/shaders/fragment-shader.frag","src/shaders/update-shader.frag","src/waves-element.js"],"names":["module","exports","cout","console","log","bind","peak","uv","pos","size","dx","x","dy","y","d","Math","sqrt","exp","calculate_initial_condition","R","C","arr","Float32Array","peak_pos","r","c","i","init","canvas","initial_condition","gl","getContext","alert","getExtension","vertexShader","createShader","VERTEX_SHADER","vertexShaderSource","updateShader","FRAGMENT_SHADER","updateShaderSource","fragmentShader","fragmentShaderSource","updateProgram","createProgram","program","positionAttributeLocation","getAttribLocation","isVelocityUpdateLocation","getUniformLocation","updateImageLocation","iTimeDeltaLocation","iMouseLocation","imageLocation","texture1","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","mipLevel","internalFormat","RG32F","srcFormat","RG","srcType","FLOAT","texImage2D","texture2","TEXTURE1","attachmentPoint","COLOR_ATTACHMENT0","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","frameBufferStatus","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","positions","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","type","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","vertexAttribPointer","mouseData","mouse_x","mouse_y","mouse_updated","is_dragging","addEventListener","e","rect","target","getBoundingClientRect","floor","clientX","left","bottom","clientY","args","prev","window","requestAnimationFrame","step","timestamp","deltaTime","useProgram","uniform1i","uniform1f","uniform3i","render","texture","viewport","width","height","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawArrays","TRIANGLES","source","shader","success","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","WavesElement","LitElement","styles","css","constructor","setupCanvas","updateComplete","shadowRoot","getElementById","html","customElements","define"],"mappings":"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","file":"waves-element.982551d8.js","sourceRoot":"..","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module shady-render\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex: number = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|((value: string, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst microtaskPromise = Promise.resolve(true);\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY|typeof STATE_HAS_CONNECTED;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n  private _hasConnectedResolver: (() => void)|undefined = undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    this._updateState = this._updateState | STATE_HAS_CONNECTED;\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection and if one is pending connection the\n    // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n    // update, otherwise requestUpdate.\n    if (this._hasConnectedResolver) {\n      this._hasConnectedResolver();\n      this._hasConnectedResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const propName = ctor._attributeToPropertyMap.get(name);\n    if (propName !== undefined) {\n      const options =\n          ctor._classProperties!.get(propName) || defaultPropertyDeclaration;\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options =\n          ctor._classProperties!.get(name) || defaultPropertyDeclaration;\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    // Mark state updating...\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    let resolve!: (r: boolean) => void;\n    let reject!: (e: Error) => void;\n    const previousUpdatePromise = this._updatePromise;\n    this._updatePromise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await previousUpdatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    // Make sure the element has connected before updating.\n    if (!this._hasConnected) {\n      await new Promise((res) => this._hasConnectedResolver = res);\n    }\n    try {\n      const result = this.performUpdate();\n      // If `performUpdate` returns a Promise, we await it. This is done to\n      // enable coordinating updates with a scheduler. Note, the result is\n      // checked to avoid delaying an additional microtask unless we need to.\n      if (result != null) {\n        await result;\n      }\n    } catch (e) {\n      reject(e);\n    }\n    resolve(!this._hasRequestedUpdate);\n  }\n\n  private get _hasConnected() {\n    return (this._updateState & STATE_HAS_CONNECTED);\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      throw e;\n    } finally {\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected _getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  new (...args: unknown[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options: AddEventListenerOptions) =>\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n         (name !== undefined) ?\n         legacyEventOptions(options, protoOrDescriptor as Object, name) :\n         standardEventOptions(options, protoOrDescriptor as ClassElement)) as\n        // tslint:disable-next-line:no-any decorator\n        any;\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {TemplateResult} from 'lit-html';\nimport {render} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(\n    styles: CSSResultArray, result: CSSResult[] = []): CSSResult[] {\n  for (let i = 0, length = styles.length; i < length; i++) {\n    const value = styles[i];\n    if (Array.isArray(value)) {\n      arrayFlat(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles: CSSResultArray): CSSResult[] =>\n    styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\n\nexport class LitElement extends UpdatingElement {\n\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n  /**\n   * Render method used to render the lit-html TemplateResult to the element's\n   * DOM.\n   * @param {TemplateResult} Template to render.\n   * @param {Element|DocumentFragment} Node into which to render.\n   * @param {String} Element name.\n   * @nocollapse\n   */\n  static render = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /** @nocollapse */\n  protected static finalize() {\n    // The Closure JS Compiler does not always preserve the correct \"this\"\n    // when calling static super methods (b/137460243), so explicitly bind.\n    super.finalize.call(this);\n    // Prepare styling that is stamped at first render time. Styling\n    // is built from user provided `styles` or is inherited from the superclass.\n    this._styles =\n        this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n        this._getUniqueStyles() :\n        this._styles || [];\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles(): CSSResult[] {\n    // Take care not to call `this.styles` multiple times since this generates\n    // new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.styles;\n    const styles: CSSResult[] = [];\n    if (Array.isArray(userStyles)) {\n      const flatStyles = flattenStyles(userStyles);\n      // As a performance optimization to avoid duplicated styling that can\n      // occur especially when composing via subclassing, de-duplicate styles\n      // preserving the last item in the list. The last item is kept to\n      // try to preserve cascade order with the assumption that it's most\n      // important that last added styles override previous styles.\n      const styleSet = flatStyles.reduceRight((set, s) => {\n        set.add(s);\n        // on IE set.add does not return the set.\n        return set;\n      }, new Set<CSSResult>());\n      // Array.from does not work on Set in IE\n      styleSet.forEach((v) => styles.unshift(v));\n    } else if (userStyles) {\n      styles.push(userStyles);\n    }\n    return styles;\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    const templateResult = this.render() as unknown;\n    if (templateResult instanceof TemplateResult) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render(): TemplateResult|void {\n  }\n}\n","module.exports=\"#version 300 es\\n#define GLSLIFY 1\\n\\nin vec4 a_position;\\n\\nvoid main()\\n{\\n  gl_Position = a_position;\\n}\\n\";","module.exports=\"#version 300 es\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D u_image;\\n\\nout vec4 fragColor;\\n\\nfloat sigmoid(float x)\\n{\\n    return 1. / (1. + exp(-x));\\n}\\n\\nvec3 floatToRgb(float v, float scale) {\\n    float r = v;\\n    float g = mod(v*scale,1.0);\\n    r-= g/scale;\\n    float b = mod(v*scale*scale,1.0);\\n    g-=b/scale;\\n    return vec3(r,g,b);\\n}\\n\\nvoid main()\\n{\\n    vec2 fragCoord = gl_FragCoord.xy;\\n    vec2 iResolution = vec2(256., 256.);\\n\\n    // get current x and y.\\n    fragCoord -= 0.5; // pixel coordinates are given as mid intergers, subtract 0.5 to make it interger.\\n    ivec2 center = ivec2(fragCoord);\\n    ivec2 res    = ivec2(iResolution) - 1;\\n\\n    float pos = texelFetch(u_image, center, 0).y;\\n\\n    // vec3 col = floatToRgb(pos, 256.);\\n    vec3 col = vec3(sigmoid(pos), sin(pos), cos(pos));\\n    // vec3 col = vec3(sigmoid(pos));\\n\\n    fragColor = vec4(col, 1.0);\\n}\\n\";","module.exports=\"#version 300 es\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D i_image;\\nuniform bool is_velocity_update;\\nuniform float iTimeDelta;\\nuniform ivec3 iMouse;\\n\\nout vec4 fragColor;\\n\\n#define SPRING_CONSTANT .04\\n#define PROP_SPEED 1.\\n#define MASS 10.\\n#define FRICTION_COEFF 0.005\\n#define PEAK_SIZE .2\\n#define MAX_VELOCITY_MAGNITUDE 10.\\n#define MAX_DISPLACEMENT 64.\\n\\nfloat sigmoid(float x)\\n{\\n    return 1. / (1. + exp(-x));\\n}\\n\\nfloat peak(ivec2 center, ivec2 pos, float size)\\n{\\n    float d = length(vec2(center) - vec2(pos));\\n    float e = exp(-size * d);\\n    return e;\\n}\\n\\nvoid main()\\n{\\n    vec2 fragCoord = gl_FragCoord.xy;\\n    vec2 iResolution = vec2(256., 256.);\\n\\n    // get current x and y.\\n    fragCoord -= 0.5; // pixel coordinates are given as mid intergers, subtract 0.5 to make it interger.\\n    ivec2 center = ivec2(fragCoord);\\n    ivec2 res    = ivec2(iResolution) - 1;\\n\\n    // if it is a boundary cell velocity is 0.\\n    if(center.x == 0 || center.y == 0 || center.x == res.x || center.y == res.y)\\n    {\\n        fragColor = vec4(vec3(0.), 1.0);\\n        return;\\n    }\\n\\n    ivec2 left   = center + ivec2(-1,  0);\\n    ivec2 top    = center + ivec2( 0,  1);\\n    ivec2 right  = center + ivec2( 1,  0);\\n    ivec2 bottom = center + ivec2( 0, -1);\\n\\n    // get previous z coordinate of current cell and neighbour cells.\\n\\tfloat pos_c = texelFetch(i_image, center, 0).y;\\n\\n\\tfloat pos_l = texelFetch(i_image, left  , 0).y;\\n\\tfloat pos_t = texelFetch(i_image, top   , 0).y;\\n\\tfloat pos_r = texelFetch(i_image, right , 0).y;\\n\\tfloat pos_b = texelFetch(i_image, bottom, 0).y;\\n\\n    // get previous velocity of current cell.\\n\\tfloat vel   = texelFetch(i_image, center, 0).x;\\n\\n    // get 3d positions.\\n    vec3 pos_cv = vec3(vec2(center), pos_c);\\n\\n    if(is_velocity_update)\\n    {\\n        // UPDATE VELOCITIES\\n        // Channel 0 is previous velocities (x coordinate) and previous positions (y coordinate).\\n\\n        vec3 pos_lv = vec3(vec2(left  ), pos_l);\\n        vec3 pos_tv = vec3(vec2(top   ), pos_t);\\n        vec3 pos_rv = vec3(vec2(right ), pos_r);\\n        vec3 pos_bv = vec3(vec2(bottom), pos_b);\\n\\n        // calculate total force using Hooke's law.\\n        vec3 force_l = (pos_lv - pos_cv);\\n        vec3 force_t = (pos_tv - pos_cv);\\n        vec3 force_r = (pos_rv - pos_cv);\\n        vec3 force_b = (pos_bv - pos_cv);\\n\\n        force_l = normalize(force_l) * (length(force_l) - 1.) * SPRING_CONSTANT;\\n        force_t = normalize(force_t) * (length(force_t) - 1.) * SPRING_CONSTANT;\\n        force_r = normalize(force_r) * (length(force_r) - 1.) * SPRING_CONSTANT;\\n        force_b = normalize(force_b) * (length(force_b) - 1.) * SPRING_CONSTANT;\\n\\n        // gravity\\n        vec3 force_g = vec3(0.); // ZERO GRAVITY\\n        // vec3 force_g = vec3(0., 0., -0.001 * MASS); // VERY LOW GRAVITY\\n        // vec3 force_g = vec3(0., 0., -1.62 * MASS); // MOON\\n        // vec3 force_g = vec3(0., 0., -9.807 * MASS); // EARTH\\n\\n        vec3 total_force = force_l + force_t + force_r + force_b + force_g;\\n\\n        // calculate acceleration and velocity.\\n        float acc = total_force.z / MASS;\\n        vel = (1. - FRICTION_COEFF) * vel + acc * iTimeDelta * PROP_SPEED;\\n        //vel = (1. - FRICTION_COEFF * screen_center_dist(center)) * vel + acc * iTimeDelta * PROP_SPEED;\\n\\n        // clamp velocity.\\n        vel = clamp(vel, -MAX_VELOCITY_MAGNITUDE, MAX_VELOCITY_MAGNITUDE);\\n\\n        // output current velocity and previous position.\\n        fragColor = vec4(vel, pos_c, 0., 1.0);\\n    }\\n    else\\n    {\\n        // UPDATE POSITIONS\\n        // Channel 0 is previous velocities (x coordinate) and previous positions (y coordinate).\\n\\n        // calculate new position.\\n        pos_c = pos_c + vel * iTimeDelta * PROP_SPEED;\\n\\n        // if LMB is down insert a peak at the click position.\\n        ivec2 click = iMouse.xy;\\n        if(iMouse.z == 1)pos_c += 10. * peak(center, click, PEAK_SIZE);\\n        // pos_c = 0.;\\n\\n        // clamp the position.\\n        pos_c = clamp(pos_c, -MAX_DISPLACEMENT, MAX_DISPLACEMENT);\\n\\n        // output current velocity and current position.\\n        fragColor = vec4(vel, pos_c, 0., 1.0);\\n    }\\n}\\n\\n/*\\n\\n\\nfloat screen_center_dist(ivec2 pos)\\n{\\n    ivec2 screen_center = ivec2(iResolution) / 2;\\n    float d = length(vec2(pos) - vec2(screen_center));\\n    return sigmoid(d);\\n}\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*/\\n\\n/*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*//*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*//*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*//*\\n\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\\n{\\n\\n}\\n*/\";","import { LitElement, html, css } from 'lit-element';\r\nimport vertexShaderSource from './shaders/vertex-shader.vert';\r\nimport fragmentShaderSource from './shaders/fragment-shader.frag';\r\nimport updateShaderSource from './shaders/update-shader.frag';\r\n\r\nconst cout = console.log.bind(console);\r\n\r\nfunction peak(uv, pos, size)\r\n{\r\n    const dx = uv.x - pos.x, dy = uv.y - pos.y;\r\n    const d = Math.sqrt(dx * dx + dy * dy);\r\n    return Math.exp(- size * d);\r\n}\r\n\r\nfunction calculate_initial_condition(R, C)\r\n{\r\n    // The initial condition is a peak at the center of the screen.\r\n    const arr = new Float32Array(R * C * 2);\r\n    const peak_pos = {x: 0.5, y: 0.5};\r\n    const peak_size = 10;\r\n    for(let r = 1; r < R - 1; r++)\r\n    {\r\n        for(let c = 1; c < C - 1; c++)\r\n        {\r\n            const i = 2 * (r * C + c);\r\n            const uv = {x: (c / R), y: (r/ R)};\r\n            arr[i + 1] = peak(uv, peak_pos, peak_size); // position\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nfunction init(canvas)\r\n{\r\n    const initial_condition = calculate_initial_condition(256, 256);\r\n\r\n    const gl = canvas.getContext('webgl2');\r\n\r\n    if (!gl) {\r\n        alert('No webgl2 support on your device!!');\r\n        return;\r\n    }\r\n\r\n    const ext = (gl.getExtension('EXT_color_buffer_float'));\r\n    if (!ext) {\r\n        alert('No support for rendering to floating point textures on your device!!');\r\n        return;\r\n    }\r\n\r\n    // Compile all the shaders.\r\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const updateShader = createShader(gl, gl.FRAGMENT_SHADER, updateShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create and link all shader programs.\r\n    const updateProgram = createProgram(gl, vertexShader, updateShader);\r\n    const program = createProgram(gl, vertexShader, fragmentShader);\r\n\r\n    // Get locations of shader inputs.\r\n    const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\r\n    const isVelocityUpdateLocation = gl.getUniformLocation(updateProgram, 'is_velocity_update');\r\n    const updateImageLocation = gl.getUniformLocation(updateProgram, 'i_image');\r\n    const iTimeDeltaLocation = gl.getUniformLocation(updateProgram, 'iTimeDelta');\r\n    const iMouseLocation = gl.getUniformLocation(updateProgram, 'iMouse');\r\n    const imageLocation = gl.getUniformLocation(program, 'u_image');\r\n\r\n    // Configure texture 1.\r\n    const texture1 = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n    const mipLevel = 0, internalFormat = gl.RG32F, texWidth = 256, texHeight = 256, texBorder = 0, srcFormat = gl.RG, srcType = gl.FLOAT;\r\n    gl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, texWidth, texHeight, texBorder, srcFormat, srcType, initial_condition);\r\n\r\n    // Configure texture 2.\r\n    const texture2 = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, mipLevel, internalFormat, texWidth, texHeight, texBorder, srcFormat, srcType, new Float32Array(256 * 256 * 2));\r\n\r\n    // Create a framebuffer for rendering to texture.\r\n    const attachmentPoint = gl.COLOR_ATTACHMENT0;\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, texture2, 0);\r\n\r\n    // Check framebuffer status and report errors.\r\n    const frameBufferStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    const statuses = {\r\n        [gl.FRAMEBUFFER_COMPLETE]: 'complete',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT]: 'incomplete attachment',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT]: 'missing attachment',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS]: 'height and width of attachment are not the same',\r\n        [gl.FRAMEBUFFER_UNSUPPORTED]: 'format of the attachedment is not supported or some other conditions',\r\n        [gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE]: 'the values of gl.RENDERBUFFER_SAMPLES are different among different attached renderbuffers or are non zero if attached images are a mix of render buffers and textures'\r\n    };\r\n    // cout('framebuffer status:', frameBufferStatus, statuses[frameBufferStatus]);\r\n    if(frameBufferStatus != gl.FRAMEBUFFER_COMPLETE)\r\n    {\r\n        alert('Failed to create a framebuffer!!');\r\n        return;\r\n    }\r\n\r\n    // Upload rectangle coordinates.\r\n    const positions = [\r\n        -1, -1,\r\n        -1,  1,\r\n         1,  1,\r\n         1,  1,\r\n         1, -1,\r\n        -1, -1\r\n    ];\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    // Create a VAO to read the position data.\r\n    const size = 2, type = gl.FLOAT, normalize = false, stride = 0, offset = 0;\r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n    // Data to handle mouse events.\r\n    const mouseData = {mouse_x: 0, mouse_y: 0, mouse_updated: false, is_dragging: false};\r\n\r\n    canvas.addEventListener('mousedown', e => {\r\n        mouseData.is_dragging = true;\r\n        const rect = e.target.getBoundingClientRect();\r\n        mouseData.mouse_x = Math.floor(e.clientX - rect.left); //x position within the element.\r\n        mouseData.mouse_y = Math.floor(rect.bottom - e.clientY);  //y position within the element.\r\n        mouseData.mouse_updated = true;\r\n        // cout(mouseData.mouse_x, mouseData.mouse_y, mouseData.mouse_updated);    \r\n    });\r\n    canvas.addEventListener('mousemove', e => {\r\n        if(mouseData.is_dragging)\r\n        {\r\n            const rect = e.target.getBoundingClientRect();\r\n            mouseData.mouse_x = Math.floor(e.clientX - rect.left); //x position within the element.\r\n            mouseData.mouse_y = Math.floor(rect.bottom - e.clientY);  //y position within the element.\r\n            mouseData.mouse_updated = true;\r\n            // cout(mouseData.mouse_x, mouseData.mouse_y, mouseData.mouse_updated);    \r\n        }\r\n    });\r\n    canvas.addEventListener('mouseup', () => {\r\n        mouseData.is_dragging = false;\r\n    });\r\n    canvas.addEventListener('mouseleave', () => {\r\n        mouseData.is_dragging = false;\r\n    });\r\n    // Arguments passed to update step.\r\n    const args = {\r\n        gl, program, attachmentPoint, updateProgram, vao, iMouseLocation, iTimeDeltaLocation, isVelocityUpdateLocation, imageLocation, updateImageLocation, frameBuffer, texture1, texture2, prev: 0, mouseData\r\n    };\r\n    window.requestAnimationFrame(step.bind(null, args));\r\n}\r\n\r\nfunction step(args, timestamp)\r\n{\r\n    // Update velocities and positions and render a single frame.\r\n\r\n    const {\r\n        gl, program, attachmentPoint, updateProgram, vao, iMouseLocation, iTimeDeltaLocation, isVelocityUpdateLocation, imageLocation, updateImageLocation, frameBuffer, texture1, texture2, prev, mouseData\r\n    } = args;\r\n    const deltaTime = timestamp - prev;\r\n\r\n    // Run the update program for veloctiy update.\r\n    gl.useProgram(updateProgram);\r\n    gl.uniform1i(isVelocityUpdateLocation, 1);\r\n    gl.uniform1f(iTimeDeltaLocation, deltaTime);\r\n    gl.uniform3i(iMouseLocation, mouseData.mouse_x, mouseData.mouse_y, mouseData.mouse_updated ? 1 : 0);\r\n    render(gl, updateProgram, vao, updateImageLocation, 0, frameBuffer);\r\n\r\n    // Swap textures.\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, texture1, 0);\r\n\r\n    // Run the update program for position update.\r\n    gl.useProgram(updateProgram);\r\n    gl.uniform1i(isVelocityUpdateLocation, 0);\r\n    render(gl, updateProgram, vao, updateImageLocation, 0, frameBuffer);\r\n\r\n    // Swap textures again.\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture1);\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture2);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, texture2, 0);\r\n\r\n    // Run the render program.\r\n    render(gl, program, vao, imageLocation, 0, null);\r\n\r\n    mouseData.mouse_updated = false;\r\n    window.requestAnimationFrame(step.bind(null, {...args, prev: timestamp}));\r\n}\r\n\r\nfunction render(gl, program, vao, imageLocation, texture, frameBuffer)\r\n{\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // clear viewport\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n    gl.clearColor(0, 0, 0, 0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    // render\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n    gl.uniform1i(imageLocation, texture);\r\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n}\r\n\r\nfunction createShader(gl, type, source)\r\n{\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if(success)return shader;\r\n\r\n    cout('Failed to compile the shader:', type);\r\n    console.log(gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n}\r\n\r\nfunction createProgram(gl, vertexShader, fragmentShader)\r\n{\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n    if(success)return program;\r\n\r\n    cout('Failed to compile the shader program.');\r\n    console.log(gl.getProgramInfoLog(program));\r\n    gl.deleteProgram(program);\r\n}\r\n\r\nexport class WavesElement extends LitElement\r\n{\r\n    static get styles()\r\n    {\r\n        return css`\r\n            /* Selects the host element */\r\n            :host { display: inline-block;}\r\n            /* Selects the host element if it is hidden */\r\n            :host([hidden]) { display: none; }\r\n        `;\r\n    }\r\n    constructor()\r\n    {\r\n        super();\r\n        this.setupCanvas();\r\n    }\r\n    async setupCanvas()\r\n    {\r\n        await this.updateComplete;\r\n\r\n        const canvas = this.shadowRoot.getElementById('webgl-canvas');\r\n        init(canvas);\r\n    }\r\n    render()\r\n    {\r\n        return html`\r\n            <canvas id=\"webgl-canvas\" width=\"256\" height=\"256\"></canvas>\r\n        `;\r\n    }\r\n}\r\n\r\ncustomElements.define('waves-element', WavesElement);"]}